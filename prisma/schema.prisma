generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

// schema.prisma
model User {
    id                   String   @id @unique @map(name: "id")
    org_id               String   @map(name: "org_id")
    first_name           String   @map(name: "first_name")
    last_name            String   @map(name: "last_name")
    profile_picture      String?  @map(name: "profile_picture")
    email                String
    phonenumber          String
    password_hash        String   @map(name: "password_hash")
    isAdmin              Boolean  @default(false) @map(name: "isAdmin")
    lunch_credit_balance String?  @default("0") @map(name: "lunch_credit_balance")
    refresh_token        String   @map(name: "refresh_token") @db.VarChar(255)
    bank_number          String?  @map(name: "bank_number")
    bank_code            String?  @map(name: "bank_code")
    bank_name            String?  @map(name: "bank_name")
    bank_region          String?  @map(name: "bank_region")
    currency_code        String?  @map(name: "currency_code")
    updated_at           DateTime @default(now()) @map(name: "updated_at")
    created_at           DateTime @default(now()) @map(name: "created_at")

    withdrawals    Withdrawal[]
    organization   Organization? @relation(fields: [org_id], references: [id], onDelete: Cascade)
    sender_lunch   Lunch[]       @relation("sender")
    receiver_lunch Lunch[]       @relation("receiver")

    @@index([id])
    @@index([org_id])
    @@map(name: "users")
}

model Withdrawal {
    id         String    @id @unique @map(name: "id")
    user_id    String    @map(name: "user_id")
    status     String
    amount     BigInt
    created_at DateTime? @default(now())
    user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade) // N-M

    @@index([id])
    @@index([user_id])
    @@map(name: "withdrawals")
}

model Organization {
    id          String  @id @unique @map(name: "id")
    name        String?
    lunch_price String? @map(name: "lunch_price")
    currency    String?

    organization_invites OrganizationInvite[]
    lunches              Lunch[]
    user                 User[] // N-M
    organization_wallet  OrganizationLunchWallet?

    @@map(name: "organization")
}

model OrganizationInvite {
    id    String    @id @unique @map(name: "id")
    email String?
    token String?
    TTL   DateTime? @default(now())

    organization Organization @relation(fields: [id], references: [id], onDelete: Cascade) // N-M

    @@map(name: "organization_invites")
}

model Lunch {
    id         String   @id @unique @map(name: "id")
    senderId   String   @map(name: "senderId")
    receiverId String   @map(name: "receiverId")
    quantity   Int
    redeemed   Boolean  @map(name: "redeemed")
    created_at DateTime @map(name: "created_at")
    note       String
    org_id     String

    organization Organization @relation(fields: [org_id], references: [id], onDelete: Cascade)
    sender       User         @relation("sender", fields: [senderId], references: [id], onDelete: Cascade) // N-M
    receiver     User         @relation("receiver", fields: [receiverId], references: [id], onDelete: Cascade) // N-M

    @@index([id])
    @@index([senderId])
    @@index([receiverId])
    @@index([org_id])
    @@map(name: "lunches")
}

model OrganizationLunchWallet {
    id      String @id @unique @map(name: "id")
    balance String
    org_id  String @map(name: "org_id")

    organization Organization @relation(fields: [id], references: [id], onDelete: Cascade)

    @@map(name: "organization_lunch_wallet")
}
