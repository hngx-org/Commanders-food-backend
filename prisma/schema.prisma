generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider          = "mysql"
    url               = env("DATABASE_URL")
    shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
    relationMode      = "prisma"
}

// schema.prisma
model User {
    id                   Int       @id @unique @default(autoincrement())
    org_id               Int?      @map(name: "org_id")
    first_name           String?   @map(name: "first_name") @db.VarChar(255)
    last_name            String?   @map(name: "last_name") @db.VarChar(255)
    profile_pic          String?   @map(name: "profile_pic") @db.VarChar(255)
    email                String    @unique @db.VarChar(255)
    phone                String?   @db.VarChar(20) // Assuming phone is a string
    password_hash        String    @map(name: "password_hash")
    is_admin             Boolean   @default(false) @map(name: "is_admin")
    lunch_credit_balance Int?      @map(name: "lunch_credit_balance")
    refresh_token        String?   @map(name: "refresh_token") @db.VarChar(255)
    bank_number          String?   @map(name: "bank_number")
    bank_code            String?   @map(name: "bank_code")
    bank_name            String?   @map(name: "bank_name")
    bank_region          String?   @map(name: "bank_region")
    currency_code        String?   @map(name: "currency_code")
    updated_at           DateTime? @default(now()) @map(name: "updated_at")
    created_at           DateTime? @default(now()) @map(name: "created_at")

    withdrawals    Withdrawal[]
    organization   Organization? @relation(fields: [org_id], references: [id], onDelete: Cascade)
    sender_lunch   Lunch[]       @relation("sender")
    receiver_lunch Lunch[]       @relation("receiver")

    @@index([id])
    @@index([org_id])
    @@map(name: "users")
}

model Organization {
    id            Int      @id @default(autoincrement())
    name          String?  @default("")
    lunch_price   Decimal? @map(name: "lunch_price") @db.Decimal(10, 2)
    currency_code String   @db.VarChar(4)

    lunches             Lunch[]
    user                User[] // N-M
    organization_wallet OrganizationLunchWallet?

    @@map(name: "organizations")
}

model OrganizationLunchWallet {
    id      Int     @id @unique @default(autoincrement()) @map(name: "id")
    balance Decimal @map(name: "balance") @db.Decimal(10, 2)
    org_id  Int     @unique @map(name: "org_id")

    organization Organization? @relation(fields: [org_id], references: [id], onDelete: Cascade)

    @@map(name: "organization_lunch_wallets")
}

model Withdrawal {
    id         Int       @id @unique @default(autoincrement())
    user_id    Int       @map(name: "user_id")
    status     String
    amount     Decimal   @map(name: "amount") @db.Decimal(10, 2)
    created_at DateTime? @default(now())
    user       User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

    @@index([id])
    @@index([user_id])
    @@map(name: "withdrawals")
}

model OrganizationInvite {
    id         Int      @id @default(autoincrement()) @map(name: "id")
    email      String?
    token      String
    ttl        DateTime? @default(now()) @map(name: "ttl")
    org_id     Int      @map(name: "org_id")
    created_at DateTime? @default(now())

    @@map(name: "organization_invites")
}

model Lunch {
    id          Int       @id @default(autoincrement())
    org_id      Int       @map(name: "org_id")
    sender_id   Int       @map(name: "sender_id")
    receiver_id Int       @map(name: "receiver_id")
    quantity    Int
    redeemed    Boolean   @map(name: "redeemed")
    created_at  DateTime? @map(name: "created_at")
    note        String?

    organization Organization @relation(fields: [org_id], references: [id], onDelete: Cascade)
    sender       User         @relation("sender", fields: [sender_id], references: [id], onDelete: Cascade) // N-M
    receiver     User         @relation("receiver", fields: [receiver_id], references: [id], onDelete: Cascade) // N-M

    @@index([id])
    @@index([org_id])
    @@index([sender_id])
    @@index([receiver_id])
    @@map(name: "lunches")
}
